name: Linux

on:
  workflow_dispatch:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    permissions:
      contents: write  # for actions/upload-release-asset to upload release asset
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        bits: [32, 64]
        include:
        - bits: 32
          ARCH: "i386"
          ARCH_NAME: "i386"
          COMPILER_PATH: "/user/bin"
        - bits: 64
          ARCH: "x86_64"
          ARCH_NAME: "amd64"
          COMPILER_PATH: "/user/bin"
          
    env:
      RELEASE_NAME: raygui-dev_linux_${{ matrix.ARCH_NAME }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@master
    
    - name: Setup Release Version
      run: |
        echo "RELEASE_NAME=raygui-${{ github.event.release.tag_name }}_linux_${{ matrix.ARCH_NAME }}" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'
      
    - name: Setup Environment
      run: | 
        sudo apt-get update -qq
        sudo apt-get install gcc-multilib
        sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev
        mkdir -p build/include
        mkdir -p build/${{ env.RELEASE_NAME }}/lib
        mkdir -p tmp

    - name: Build Library
      run: |
        cd tmp
        cmake -E env CFLAGS="-fPIC -Wno-unused-result -Wno-stringop-overflow -Wno-alloc-size-larger-than" \
          cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPLATFORM=Desktop \
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE=../build/${{ env.RELEASE_NAME }}/lib \
          -DCMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE=../build/${{ env.RELEASE_NAME }}/lib
        cmake --build . --config $BUILD_TYPE
        
        cd ..
    
    - name: Generate Artifacts
      run: |
        cp -v ./raylib/src/raylib.h ./build/${{ env.RELEASE_NAME }}/include
        cp -v ./raylib/src/raymath.h ./build/${{ env.RELEASE_NAME }}/include
        cp -v ./raylib/src/rlgl.h ./build/${{ env.RELEASE_NAME }}/include
        cp -v ./raylib/CHANGELOG ./build/${{ env.RELEASE_NAME }}/CHANGELOG
        cp -v ./raylib/README.md ./build/${{ env.RELEASE_NAME }}/README.md
        cp -v ./raylib/LICENSE ./build/${{ env.RELEASE_NAME }}/LICENSE
        cd build
        tar -czvf ${{ env.RELEASE_NAME }}.tar.gz ${{ env.RELEASE_NAME }}
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RELEASE_NAME }}.tar.gz
        path: ./build/${{ env.RELEASE_NAME }}.tar.gz
        
    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/${{ env.RELEASE_NAME }}.tar.gz
          asset_name: ${{ env.RELEASE_NAME }}.tar.gz
          asset_content_type: application/gzip
      if: github.event_name == 'release' && github.event.action == 'published'  
