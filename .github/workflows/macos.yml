name: macOS

on:
  workflow_dispatch:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    permissions:
      contents: write  # for actions/upload-release-asset to upload release asset
    runs-on: macos-latest
    
    env:
      RELEASE_NAME: raylibgui-dev_macos
    
    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: Setup Release Version
      run: |
        echo "RELEASE_NAME=raylibgui-${{ github.event.release.tag_name }}_macos" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'

    - name: Setup Environment
      run: |
        mkdir -p build/${{ env.RELEASE_NAME }}/include
        mkdir -p build/lib/${{ env.RELEASE_NAME }}
        mkdir -p x86_64/lib
        mkdir -p arm64/lib

    # Generating static + shared library, note that i386 architecture is deprecated
    # Defining GL_SILENCE_DEPRECATION because OpenGL is deprecated on macOS
    - name: Build Library
      run: |
        clang --version
        
        # Extract version numbers from Makefile
        brew install grep
        RAYLIB_API_VERSION=`ggrep -Po 'RAYLIB_API_VERSION\s*=\s\K(.*)' raylib/src/Makefile`
        RAYLIB_VERSION=`ggrep -Po 'RAYLIB_VERSION\s*=\s\K(.*)' raylib/src/Makefile`
        
        CFLAGS="-target x86_64-apple-macos10.12 -DGL_SILENCE_DEPRECATION"
        LDFLAGS="-target x86_64-apple-macos10.12"
        
        # Build raylib x86_64 dynamic
        mkdir -p $GITHUB_WORKSPACE/tmp
        cmake -E env CFLAGS="-target x86_64-apple-macos10.12" \
          LDFLAGS="-target x86_64-apple-macos10.12" \
          cmake -B $GITHUB_WORKSPACE/tmp -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPLATFORM=Desktop \
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{github.workspace}}/x86_64/lib \
          -DGL_SILENCE_DEPRECATION=1
        cmake --build $GITHUB_WORKSPACE/tmp --config $BUILD_TYPE
        rm -rf $GITHUB_WORKSPACE/tmp
        
        # Build raylib arm64 dynamic
        cmake -E env CFLAGS="-target arm64-apple-macos11" \
          LDFLAGS="-target arm64-apple-macos11" \
          cmake -B $GITHUB_WORKSPACE/tmp -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DPLATFORM=Desktop \
          -DCMAKE_LIBRARY_OUTPUT_DIRECTORY=${{github.workspace}}/arm64/lib \
          -DGL_SILENCE_DEPRECATION=1
        cmake --build $GITHUB_WORKSPACE/tmp --config $BUILD_TYPE
        rm -rf $GITHUB_WORKSPACE/tmp
        
        ls -al ${{github.workspace}}/x86_64/lib
        ls -al ${{github.workspace}}/arm64/lib
        
        # Join x86_64 and arm64 dynamic
        lipo -create -output ./build/lib/${{ env.RELEASE_NAME }}/libraygui.${RAYLIB_VERSION}.dylib ${{github.workspace}}/x86_64/lib/libraygui.dylib ${{github.workspace}}/arm64/lib/libraygui.dylib
        #ln -sv libraygui.${RAYLIB_VERSION}.dylib  ./build/${{ env.RELEASE_NAME }}/lib/libraylibgui.dylib
        #ln -sv libraygui.${RAYLIB_VERSION}.dylib  ./build/${{ env.RELEASE_NAME }}/lib/libraylibgui.${RAYLIB_API_VERSION}.dylib
  
    - name: Generate Artifacts
      run: |
        cp -v ./raylib/src/raylib.h ./build/${{ env.RELEASE_NAME }}/include
        cp -v ./raylib/src/raymath.h ./build/${{ env.RELEASE_NAME }}/include
        cp -v ./raylib/src/rlgl.h ./build/${{ env.RELEASE_NAME }}/include
        cp -v ./raylib/CHANGELOG ./build/${{ env.RELEASE_NAME }}/CHANGELOG
        cp -v ./raylib/README.md ./build/${{ env.RELEASE_NAME }}/README.md
        cp -v ./raylib/LICENSE ./build/${{ env.RELEASE_NAME }}/LICENSE
        cd build
        tar -czvf ${{ env.RELEASE_NAME }}.tar.gz ${{ env.RELEASE_NAME }}
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RELEASE_NAME }}.tar.gz
        path: ./build/${{ env.RELEASE_NAME }}.tar.gz
        
    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/${{ env.RELEASE_NAME }}.tar.gz
          asset_name: ${{ env.RELEASE_NAME }}.tar.gz
          asset_content_type: application/gzip
      if: github.event_name == 'release' && github.event.action == 'published'
