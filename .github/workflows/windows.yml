name: Windows

on:
  workflow_dispatch:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write  # for actions/upload-release-asset to upload release asset
    runs-on: windows-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        compiler: [mingw-w64, msvc16]
        bits: [32, 64]
        include:
        - compiler: mingw-w64
          bits: 32
          ARCH: "i686"
          WINDRES_ARCH: pe-i386
        - compiler: mingw-w64
          bits: 64
          ARCH: "x86_64"
          WINDRES_ARCH: pe-x86-64
        - compiler: msvc16
          bits: 32
          ARCH: "x86"
          VSARCHPATH: "Win32" 
        - compiler: msvc16
          bits: 64
          ARCH: "x64" 
          VSARCHPATH: "x64"

    env:
      RELEASE_NAME: raylib-dev_win${{ matrix.bits }}_${{ matrix.compiler }}
      GNUTARGET: default

    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: Setup Release Version
      run: |
        echo "RELEASE_NAME=raylib-${{ github.event.release.tag_name }}_win${{ matrix.bits }}_${{ matrix.compiler }}" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'

    - name: Setup Environment
      run: | 
        dir
        mkdir build
        mkdir tmp
        cd build
        mkdir ${{ env.RELEASE_NAME }}
        cd ${{ env.RELEASE_NAME }}
        mkdir include
        mkdir lib
        cd ../../

    # Setup MSBuild.exe path if required
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.1
      if: matrix.compiler == 'msvc16'

    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.9
      with:
        cmake-version: '3.18.x'
    - name: Setup WinLibs
      uses: bwoodsend/setup-winlibs-action@v1.8
      with:
        add_to_path: true
        tag: 12.2.0-15.0.6-10.0.0-msvcrt-r3
      if: matrix.compiler == 'mingw-w64'
        
    - name: Build Library (MinGW-w64 32bit)
      run: |
        cd tmp
        windres.exe --version
#        windres.exe -i ..\raylib\src\raylib.dll.rc -o ..\raylib\src\raylib.dll.rc.data -O coff --target=${{ matrix.WINDRES_ARCH }}
        cmake .. -G "Unix Makefiles" -DCMAKE_MAKE_PROGRAM=mingw32-make -DCMAKE_C_FLAGS="-m32" -DPLATFORM=Desktop -DCMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE="..\build\${{ env.RELEASE_NAME }}\lib"
        cmake --build . --config $BUILD_TYPE
        cd ..
      if: matrix.compiler == 'mingw-w64' && matrix.bits == '32'

    - name: Build Library (MinGW-w64 64bit)
      run: |
        cd tmp
        windres.exe --version
        windres.exe -i ..\raylib\src\raylib.dll.rc -o ..\raylib\src\raylib.dll.rc.data -O coff --target=${{ matrix.WINDRES_ARCH }}
        cmake .. -G "Unix Makefiles" -DCMAKE_MAKE_PROGRAM=mingw32-make -DPLATFORM=Desktop -DCMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE="..\build\${{ env.RELEASE_NAME }}\lib"
        cmake --build . --config $BUILD_TYPE
        cd ..
      if: matrix.compiler == 'mingw-w64' && matrix.bits == '64'

    - name: Build Library (MSVC16)
      run: |
        cd tmp
        cmake .. -DPLATFORM=Desktop -DCMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE="..\build\${{ env.RELEASE_NAME }}\lib"
        cmake --build . --config $BUILD_TYPE
        cd ..
      if: matrix.compiler == 'msvc16'

    - name: Generate Artifacts
      run: |
        copy /Y .\raylib\src\raylib.h .\build\${{ env.RELEASE_NAME }}\include\raylib.h
        copy /Y .\raylib\src\raymath.h .\build\${{ env.RELEASE_NAME }}\include\raymath.h
        copy /Y .\raylib\src\rlgl.h .\build\${{ env.RELEASE_NAME }}\include\rlgl.h
        copy /Y .\raylib\CHANGELOG .\build\${{ env.RELEASE_NAME }}\CHANGELOG
        copy /Y .\raylib\README.md .\build\${{ env.RELEASE_NAME }}\README.md
        copy /Y .\raylib\LICENSE .\build\${{ env.RELEASE_NAME }}\LICENSE
        cd build
        7z a ./${{ env.RELEASE_NAME }}.zip ./${{ env.RELEASE_NAME }}
        dir
      shell: cmd

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.RELEASE_NAME }}.zip
        path: ./build/${{ env.RELEASE_NAME }}.zip
        
    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./build/${{ env.RELEASE_NAME }}.zip
          asset_name: ${{ env.RELEASE_NAME }}.zip
          asset_content_type: application/zip
      if: github.event_name == 'release' && github.event.action == 'published'
